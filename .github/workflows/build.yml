name: Java CI with Maven

on:
  push:
    branches: master

jobs:
  build:

    runs-on: ubuntu-latest
    

    steps:
    - uses: actions/checkout@v2


    - name: Build with Maven
      run: |
        mvn clean package
        mvn clover:setup
      
    - name: Run Coverage
      run: |
        mvn test
        mvn clover:clover
      
    - name: Upload Report
      uses: 'actions/upload-artifact@v2'
      with:
        name: report.xml
        path: ${{ github.workspace }}/target/site/clover/clover.xml



    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: python -m pip install --upgrade pip lxml

#     - name: Extract and print coverage
#       run: |
#         python -c "
#         import lxml.etree as ET
#         tree = ET.parse('./target/site/clover/clover.xml')
#         root = tree.getroot()
#         path_to_client = 'evClient.java'
#         covered = sum(int(counter.get('covered')) for counter in root.iterfind('.//sourcefile[@name=\"'+ path_to_client +'\"]/counter[@type=\"LINE\"]'))
#         missed = sum(int(counter.get('missed')) for counter in root.iterfind('.//sourcefile[@name=\"'+ path_to_client +'\"]/counter[@type=\"LINE\"]'))
#         total = covered + missed
#         coverage = covered / total * 100
#         print(f'Lines covered for Client.java: {covered}/{total} ({coverage:.2f}%)')
#         "

    - name: Extract and print coverage for Client
      id: get_coverage
      run: |
        COVERAGE=$(python -c "
        import lxml.etree as ET
        tree = ET.parse('./target/site/clover/clover.xml')
        root = tree.getroot()
        path_to_client = 'evClient.java'
        file_element = root.find('.//file[@name=\"'+ path_to_client +'\"]')
        if file_element is not None:
            metrics = file_element.find('metrics')
            statements = int(metrics.get('statements'))
            covered_statements = int(metrics.get('coveredstatements'))
            coverage = covered_statements / statements * 100
        else:
            coverage = 0
        print(f'{coverage}')
        ")
        echo "::set-output name=coverage::$COVERAGE"
