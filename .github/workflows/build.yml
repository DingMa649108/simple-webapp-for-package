name: Java CI with Maven 

on:
  push:
    branches: master

jobs:
  build:

    runs-on: ubuntu-latest
    

    steps:
    - uses: actions/checkout@v2


    - name: Build with Maven
      run: |
        mvn clean package
        mvn clover:setup test
        
    # - name: Build with Maven
    #   run: |
    #     mvn clean package
    #     mvn jacoco:report
      
    - name: Run Coverage
      run: |
        mvn clover:clover

    - name: Run Coverage
      run: |
        mvn test
      
    - name: Upload Report
      uses: 'actions/upload-artifact@v2'
      with:
        name: report.xml
        path: ${{ github.workspace }}/target/site/clover/clover.xml
        
    - name: Upload HTML Report
      uses: 'actions/upload-artifact@v2'
      with:
        name: report.xml
        path: ${{ github.workspace }}/target/site/clover/clover.html
        
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'
        
        
    - name: Install dependencies
      run: npm install xml2js

    # - name: Install Dependencies
    #   run: |
    #     npm install jsdom xpath
    
    # - name: Calculate Coverage
    #   id: calculate-coverage
    #   run: |
    #     node -e "
    #       const fs = require('fs');
    #       const jsdom = require('jsdom');
    #       const { JSDOM } = jsdom;
    #       const { select } = require('xpath');
    #       const xml = fs.readFileSync('./target/site/jacoco/jacoco.xml', 'utf-8');
    #       const dom = new JSDOM(xml, { contentType: 'text/xml' });
    #       const doc = dom.window.document;
    #       let covered = 0;
    #       let missed = 0;
    #       const sourceFileNodes = select('//sourcefile[@name=\"evClient.java\"]/counter[@type=\"LINE\"]', doc);
    #       sourceFileNodes.forEach(node => {
    #         covered += parseInt(node.getAttribute('covered'));
    #         missed += parseInt(node.getAttribute('missed'));
    #       });
    #       const coverage = (covered / (covered + missed)) * 100;
    #       fs.writeFileSync('coverage.txt', coverage.toFixed(2));
    #     "

    # - name: Assign Coverage to Variable
    #   run: echo "COVERAGE=$(cat coverage.txt)" >> $GITHUB_ENV

    # - name: Print coverage
    #   run: echo $COVERAGE

    # - name: Check coverage
    #   run: |
    #     if (( $(echo "$COVERAGE == 100" | bc -l) )); then
    #       echo "Code coverage is less than 80%"
    #       exit 1
    #     fi

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: python -m pip install --upgrade pip lxml

    # - name: Extract and print coverage
    #   run: |
    #     python -c "
    #     import lxml.etree as ET
    #     tree = ET.parse('./target/site/clover/clover.xml')
    #     root = tree.getroot()
    #     path_to_client = 'evClient.java'
    #     covered = sum(int(counter.get('covered')) for counter in root.iterfind('.//sourcefile[@name=\"'+ path_to_client +'\"]/counter[@type=\"LINE\"]'))
    #     missed = sum(int(counter.get('missed')) for counter in root.iterfind('.//sourcefile[@name=\"'+ path_to_client +'\"]/counter[@type=\"LINE\"]'))
    #     total = covered + missed
    #     coverage = covered / total * 100
    #     print(f'Lines covered for Client.java: {covered}/{total} ({coverage:.2f}%)')
    #     "

    - name: Extract and print coverage for Client
      id: get_coverage
      run: |
        coverage=$(python -c "
        import lxml.etree as ET
        tree = ET.parse('./target/site/clover/clover.xml')
        root = tree.getroot()
        path_to_client = 'evClient.java'
        file_element = root.find('.//file[@name=\"'+ path_to_client +'\"]')
        if file_element is not None:
            metrics = file_element.find('metrics')
            statements = int(metrics.get('statements'))
            covered_statements = int(metrics.get('coveredstatements'))
            coverage = covered_statements / statements * 100
        else:
            coverage = 0
        print(f'{coverage:.2f}')")
        echo "coverage=$coverage" 
        echo "Lines covered for Client.java: $covered_statements/$statements ($coverage%)"
        echo "::set-output name=coverage::$coverage"

    - name: Check coverage
      run: |
        if (( $(echo "${{ steps.get_coverage.outputs.coverage }} < 100.0" | bc -l) )); then
          echo "Error: Coverage is less than 80%";
          exit 1;
        fi
